package project_system.org;

import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.chart.StackedBarChart;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.ProgressIndicator;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.util.Callback;




public class AdminController1 {

    @FXML
    private TableColumn<Task, String> F_AssignedTo;

    @FXML
    private TableColumn<Task, Integer> F_Due;

    @FXML
    private TableColumn<Task, String> F_File;

    @FXML
    private TableColumn<Task, String> F_For;

    @FXML
    private TableColumn<Task, Integer> F_ID;

    @FXML
    private TableColumn<Task, String> F_Instruction;

    @FXML
    private TableColumn<Task, String> F_Status;

    @FXML
    private TableColumn<Task, String> F_Title;

    @FXML
    private TableColumn<Task, Void> F_Delete;

    @FXML
    private Label Goodmorninggreet;

    @FXML
    private ImageView LOGOUT;

    @FXML
    private TableColumn<Task, String> M_AssignedTo;

    @FXML
    private TableColumn<Task, Integer> M_Due;

    @FXML
    private TableColumn<Task, String> M_File;

    @FXML
    private TableColumn<Task, String> M_For;

    @FXML
    private TableColumn<Task, String> M_ID;

    @FXML
    private TableColumn<Task, String> M_Instruction;

    @FXML
    private TableColumn<Task, String> M_Status;

    @FXML
    private TableColumn<Task, String> M_Title;

    @FXML
    private TableColumn<Task, String> P_AssignedTo;

    @FXML
    private TableColumn<Task, Integer> P_Due;

    @FXML
    private TableColumn<Task, String> P_File;

    @FXML
    private TableColumn<Task, String> P_For;

    @FXML
    private TableColumn<Task, Integer> P_ID;

    @FXML
    private TableColumn<Task, String> P_Instruction;

    @FXML
    private TableColumn<Task, String> P_Status;

    @FXML
    private TableColumn<Task, String> P_Title;

    @FXML
    private TableColumn<Task, Void> P_Delete;

    @FXML
    private Label dategreet;

    @FXML
    private Label timegreet;

    @FXML
    private TableView<Task> pendingTable;

    @FXML
    private TableView<Task> finishedTable;

    @FXML
    private AnchorPane EMPLOYEE_TAB;

    @FXML
    private TableView<Project> TABLE_PROJECT;

    @FXML
    private Button btnRetrieveFile;


    @FXML
    private TableView<Project> projectTable;


    @FXML
    private TableColumn<Task,Void> M_Delete;

    @FXML
    private TableView<Task> MiissingTable;

    @FXML
    private Button ADD_EMPLOYEE;

    @FXML
    private TableView<Employee> EMPLOYEE_TABLE;

    @FXML
    private TableColumn<Employee, Void> E_DELETE;

    @FXML
    private TableColumn<Employee, String> E_DEPARTMENT;

    @FXML
    private TableColumn<Employee, String> E_EMAIL;

    @FXML
    private TableColumn<Employee, String> E_FIRSTNAME;

    @FXML
    private TableColumn<Employee, Integer> E_ID;

    @FXML
    private TableColumn<Employee, String> E_LASTNAME;

    @FXML
    private TableColumn<Employee, String> E_POSITION;

    @FXML
    private TableColumn<Employee, String> E_STATUS;


    
    @FXML
    private Button BTN_SAVE;

    @FXML
    private TextField TEXT_D;

    @FXML
    private TextField TEXT_E;

    @FXML
    private TextField TEXT_L;

    @FXML
    private TextField TEXT_N;

    @FXML
    private TextField TEXT_P;

    @FXML
    private TextField TEXT_S;



    @FXML
    private ComboBox<String> DEPARTMENT_COMBO;

    @FXML
    private TableColumn<Task, String> EDIT;

    @FXML
    private TableColumn<Employee, String> PROGRESS;

    @FXML
    private TableColumn<?, ?> PR_NO;

    @FXML
    private TableColumn<Project, Double> PR_PROGRESS;

    @FXML
    private TableColumn<Project, Double> PR_TABLE;


    @FXML
    private TableColumn<?, ?> PO_DEPARTMENT;

    @FXML
    private TableColumn<?, ?> PO_NAME;

    @FXML
    private TableColumn<?, ?> PO_POSITION;

    @FXML
    private TableColumn<?, ?> PO_PROGRESS_MONTH;

    @FXML
    private TableColumn<?, ?> PO_PROGRESS_WEEK;

    @FXML
    private TableColumn<?, ?> PO_REMARKS;

    @FXML
    private TableView<?> P_PROGRESTABLE;

    @FXML
    private StackedBarChart<?, ?> P_STACKEDBAR;
   
  
    private final String DB_URL = "jdbc:mysql://localhost:3306/pomsdb";
    private final String USER = "root";
    private final String PASSWORD = "luese_192003";

    private ObservableList<Task> pendingList = FXCollections.observableArrayList();
    private ObservableList<Task> finishedList = FXCollections.observableArrayList();
    private ObservableList<Task> MissingList = FXCollections.observableArrayList();
    private ObservableList<Employee> EmployeeList = FXCollections.observableArrayList();
    private ObservableList<Project> ProjectList = FXCollections.observableArrayList();
   
    public void initialize() {
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("EEEE, dd MMMM yyyy");
        LocalDateTime now = LocalDateTime.now();
        dategreet.setText(dtf.format(now));

        DateTimeFormatter dtf1 = DateTimeFormatter.ofPattern("HH:mm:ss");
        LocalDateTime now1 = LocalDateTime.now();
        timegreet.setText(dtf1.format(now1));

        Scene scene = new Scene(new VBox()); // Create a new Scene object
        scene.getStylesheets().add(getClass().getResource("styles.css").toExternalForm());
        setGreetingMessage();
        setupTableView();
        addFileViewButtonToTable(P_File);
        addFileViewButtonToTable(F_File);
        addFileViewButtonToTable(M_File);
        populateDepartmentComboBox();
        populateDepartmentComboBox();
        DEPARTMENT_COMBO.setOnAction(event -> filterEmployeesByDepartment());
        FetchProjectData();
        setProjectTableView();
        fetchDataFromDatabase1();
        transferOverdueTasks();

    
        
        if (P_Delete != null) {
            addDeleteButtonToTable(P_Delete);
        } else {
            System.err.println("P_Delete column is not initialized. Please check the FXML file.");
        }
        
        if (F_Delete != null) {
            addDeleteButtonToTable(F_Delete);
        } else {
            System.err.println("F_Delete column is not initialized. Please check the FXML file.");
        }
        
        if (M_Delete != null) {
            addDeleteButtonToTable(M_Delete);
        } else {
            System.err.println("M_Delete column is not initialized. Please check the FXML file.");
        }
        
        if (pendingTable != null) {
            fetchDataFromDatabase();
        } else {
            System.err.println("pendingTable is not initialized. Please check the FXML file.");
        }
        
        /*if (finishedTable != null) {
            fetchDataFromDatabase1();
        } else {
            System.err.println("finishedTable is not initialized. Please check the FXML file.");
        }*/
        
        if (MiissingTable != null) {
            fetchDataFromDatabase2();
        } else {
            System.err.println("MiissingTable is not initialized. Please check the FXML file.");
        }

        if (EMPLOYEE_TABLE != null) {
            FetchEmployeeData();
            setEmployeeTableView();
           
        } else {
            System.err.println("EMPLOYEE_TABLE is not initialized. Please check the FXML file.");
        }
        
    }

    private void setGreetingMessage() {
        LocalTime now = LocalTime.now();
        if (now.isAfter(LocalTime.MIDNIGHT) && now.isBefore(LocalTime.NOON)) {
            Goodmorninggreet.setText("Good Morning,");
        } else if (now.isBefore(LocalTime.of(18, 0))) {
            Goodmorninggreet.setText("Good Afternoon,");
        } else {
            Goodmorninggreet.setText("Good Evening,");
        }
    }

    private void fetchDataFromDatabase() {
        String query = "SELECT * FROM taskdb";

        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {

            while (rs.next()) {
                pendingList.add(new Task(
                    rs.getString("Title"),
                    rs.getString("Instruction"),
                    rs.getString("AssignedTo"),
                    rs.getString("For"),
                    rs.getDate("Due"),
                    rs.getString("File"),
                    rs.getString("Status"),
                    rs.getInt("ID")
                ));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    private void setupTableView() {
        P_Title.setCellValueFactory(new PropertyValueFactory<>("Title"));
        P_Instruction.setCellValueFactory(new PropertyValueFactory<>("Instruction"));
        P_AssignedTo.setCellValueFactory(new PropertyValueFactory<>("AssignedTo"));
        P_For.setCellValueFactory(new PropertyValueFactory<>("forField"));
        P_Due.setCellValueFactory(new PropertyValueFactory<>("Due"));
        P_File.setCellValueFactory(new PropertyValueFactory<>("File"));
        P_Status.setCellValueFactory(new PropertyValueFactory<>("Status"));
        P_ID.setCellValueFactory(new PropertyValueFactory<>("id"));
        pendingTable.setItems(pendingList);
    }
    public class Task {
        private String title;
        private String instruction;
        private String assignedTo;
        private String forField;
        private Date due;
        private String file;
        private String status;
        private int id;

        public Task(String title, String instruction, String assignedTo, String forField, Date due, String file, String status, int id) {
            this.title = title;
            this.instruction = instruction;
            this.assignedTo = assignedTo;
            this.forField = forField;
            this.due = due;
            this.file = file;
            this.status = status;
            this.id = id;
        }

        // Getters and setters for all fields
        public String getTitle() { return title; }
        public void setTitle(String title) { this.title = title; }

        public String getInstruction() { return instruction; }
        public void setInstruction(String instruction) { this.instruction = instruction; }

        public String getAssignedTo() { return assignedTo; }
        public void setAssignedTo(String assignedTo) { this.assignedTo = assignedTo; }

        public String getForField() { return forField; }
        public void setForField(String forField) { this.forField = forField; }

        public Date getDue() { return due; }
        public void setDue(Date due) { this.due = due; }

        public String getFile() { return file; }
        public void setFile(String file) { this.file = file; }

        public String getStatus() { return status; }
        public void setStatus(String status) { this.status = status; }

        public int getId() { return id; }
        public void setId(int id) { this.id = id; }
    }

    public class Project {
        private String projectName;
        private String id;

        public Project(String projectName, String id) {
            this.projectName = projectName;
            this.id = id;
        }

        public String getId() {
            return id;
        }

        public void setId(String id) {
            this.id = id;
        }
        
        public String getProjectName() {
            return projectName;
        }

        public void setProjectName(String projectName) {
            this.projectName = projectName;
        }
    }
//==============================================================================================================/
private void fetchDataFromDatabase1() {
    String query = "SELECT * FROM finisheddb";
    finishedList.clear(); // Clear the list before adding new data

    try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(query)) {

        while (rs.next()) {
            finishedList.add(new Task(
                rs.getString("Title"),
                rs.getString("Instruction"),
                rs.getString("AssignedTo"),
                rs.getString("For"),
                rs.getDate("Due"),
                rs.getString("File"),
                rs.getString("Status"),
                rs.getInt("ID")
            ));
        }

        F_Title.setCellValueFactory(new PropertyValueFactory<>("Title"));
        F_Instruction.setCellValueFactory(new PropertyValueFactory<>("Instruction"));
        F_AssignedTo.setCellValueFactory(new PropertyValueFactory<>("AssignedTo"));
        F_For.setCellValueFactory(new PropertyValueFactory<>("forField"));
        F_Due.setCellValueFactory(new PropertyValueFactory<>("Due"));
        F_File.setCellValueFactory(new PropertyValueFactory<>("File"));
        F_Status.setCellValueFactory(new PropertyValueFactory<>("Status"));
        F_ID.setCellValueFactory(new PropertyValueFactory<>("id"));

        finishedTable.setItems(finishedList);

    } catch (SQLException e) {
        e.printStackTrace();
    }
}

    private void fetchDataFromDatabase2() {
        String query = "SELECT * FROM missingdb";

        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {

            while (rs.next()) {
                MissingList.add(new Task(
                    rs.getString("Title"),
                    rs.getString("Instruction"),
                    rs.getString("AssignedTo"),
                    rs.getString("For"),
                    rs.getDate("Due"),
                    rs.getString("File"),
                    rs.getString("Status"),
                    rs.getInt("ID")
                ));

            }
                M_Title.setCellValueFactory(new PropertyValueFactory<>("Title"));
                M_Instruction.setCellValueFactory(new PropertyValueFactory<>("Instruction"));
                M_AssignedTo.setCellValueFactory(new PropertyValueFactory<>("AssignedTo"));
                M_For.setCellValueFactory(new PropertyValueFactory<>("forField"));
                M_Due.setCellValueFactory(new PropertyValueFactory<>("Due"));
                M_File.setCellValueFactory(new PropertyValueFactory<>("File"));
                M_Status.setCellValueFactory(new PropertyValueFactory<>("Status"));
                M_ID.setCellValueFactory(new PropertyValueFactory<>("id"));
        
                MiissingTable.setItems(MissingList);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
      
    @FXML
    void BTN_LOGOUT(MouseEvent event) {

    }

    @FXML
    void btnCREATETASK(MouseEvent event) throws IOException {

        App.setRoot("ASSIGNED_TASK", 1280, 800);
        
    }
        
    @FXML
    void btnHOME(MouseEvent event) throws IOException {
        App.setRoot("DASHBOARD", 1280, 800);
    }

    @FXML
    void btnPERFORAMANCE(MouseEvent event) {

    }

    @FXML
    void btnPRINT(MouseEvent event) {

    }



       @FXML
    void BTN_PROJECTADD(MouseEvent event) throws IOException {
        Stage stage = new Stage();
        stage.setTitle("Add Project");
    
        VBox vbox = new VBox(10);
        vbox.setPadding(new Insets(10));
    
        Label label1 = new Label("Project Name");
        TextField textfield = new TextField();
        Button button = new Button("Add");
    
        vbox.getChildren().addAll(label1, textfield, button);
    
        Scene scene = new Scene(vbox, 300, 200);
        stage.setScene(scene);
        stage.show();
    
        button.setOnAction(e -> {
            String projectName = textfield.getText();
            if (projectName.isEmpty()) {
                showAlert("Project Name cannot be empty", projectName);
                return;
            }
            try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);
            PreparedStatement stmt = conn.prepareStatement("INSERT INTO projectTitle  VALUES (?)")) {
                          
                          
             stmt.setString(1, projectName);
             stmt.executeUpdate();
             showAlert(" Project added successfully", projectName);
             textfield.setText("");
         } catch (SQLException ex) {
             showAlert("Error: " + ex.getMessage(), projectName);
         }
     });
     }
    
 
// ========================================RETRIEVE FILE FROM DATABASE=======================================//
    @FXML
    private File retrieveFileFromDatabase(int fileId) {
    String query = "SELECT File, FileData FROM taskdb WHERE ID = ?";
    File file = null;

    try (Connection conn = DriverManager.getConnection(DB_URL,USER,PASSWORD);
         PreparedStatement stmt = conn.prepareStatement(query)) {

        stmt.setInt(1, fileId);
        ResultSet rs = stmt.executeQuery();

        if (rs.next()) {
            String fileName = rs.getString("File");
            InputStream inputStream = rs.getBinaryStream("FileData");

            file = new File("retrieved_" + fileName);
            try (FileOutputStream outputStream = new FileOutputStream(file)) {
                byte[] buffer = new byte[1024];
                int bytesRead;
                while ((bytesRead = inputStream.read(buffer)) != -1) {
                    outputStream.write(buffer, 0, bytesRead);
                }
            }
        }
    } catch (SQLException | IOException e) {
        e.printStackTrace();
        showAlert("Error", "Error retrieving file: " + e.getMessage());
    }

    return file;
}

private void openFile(String filePath) {
    File file = new File(filePath);
    if (file.exists()) {
        try {
            Desktop.getDesktop().open(file);
        } catch (IOException e) {
            e.printStackTrace();
            showAlert("Error", "Error opening file: " + e.getMessage());
        }
    } else {
        showAlert("Error", "File does not exist");
    }
}
//========================================ADD BUTTON TO THR TABLE=======================================//

private void addFileViewButtonToTable(TableColumn<Task, String> column) {
    column.setCellFactory(new Callback<TableColumn<Task, String>, TableCell<Task, String>>() {
        @Override
        public TableCell<Task, String> call(TableColumn<Task, String> param) {
            return new TableCell<Task, String>() {
                private final Button viewButton = new Button("View File");
                private final HBox container = new HBox(viewButton);

                {
                    container.setAlignment(Pos.CENTER);
                    viewButton.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white;");
                    viewButton.setOnAction(event -> {
                        Task task = getTableView().getItems().get(getIndex());
                        int fileId = task.getId(); // Assuming Task has a method getId()
                        File file = retrieveFileFromDatabase(fileId);
                        if (file != null) {
                            openFile(file.getAbsolutePath());
                        }
                    });
                }

                @Override
                protected void updateItem(String item, boolean empty) {
                    super.updateItem(item, empty);
                    if (empty) {
                        setGraphic(null);
                    } else {
                        setGraphic(container);
                    }
                }
            };
        }
    });
}

private void addDeleteButtonToTable(TableColumn<Task, Void> column) {
    if (column == null) {
        System.err.println("Column is not initialized.");
        return;
    }
    column.setCellFactory(new Callback<TableColumn<Task, Void>, TableCell<Task, Void>>() {
        @Override
        public TableCell<Task, Void> call(TableColumn<Task, Void> param) {
            return new TableCell<Task, Void>() {
                private final Button deleteButton = new Button("Delete");
                private final HBox container = new HBox(deleteButton);
                {
                    container.setAlignment(Pos.CENTER);
                    deleteButton.setStyle("-fx-background-color: #f44336; -fx-text-fill: white;");
                    deleteButton.setOnAction(event -> {
                        Task task = getTableView().getItems().get(getIndex());
                        deleteTaskFromDatabase(task.getId());
                        getTableView().getItems().remove(task);
                    });
                }
                @Override
                protected void updateItem(Void item, boolean empty) {
                    super.updateItem(item, empty);
                    if (empty) {
                        setGraphic(null);
                    } else {
                        setGraphic(container);
                    }
                }
            };
        }
    });
}

private void deleteTaskFromDatabase(int taskId) {
    String query = "DELETE FROM taskdb WHERE ID = ?";

    try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);
         PreparedStatement stmt = conn.prepareStatement(query)) {

        stmt.setInt(1, taskId);
        stmt.executeUpdate();
        showAlert("Success", "Task deleted successfully");

    } catch (SQLException e) {
        e.printStackTrace();
       
    }
}

private void showAlert(String title, String message) {
    Alert alert = new Alert(AlertType.INFORMATION);
    alert.setTitle(title);
    alert.setHeaderText(null);
    alert.setContentText(message);
    alert.showAndWait();
}

/*****************************************EMPLOYEE TAB****************************************************/

private void deleteEmployeeFromDatabase(int employeeId) {
    String query = "DELETE FROM employeedb WHERE EmployeeID = ?";

    try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);
         PreparedStatement stmt = conn.prepareStatement(query)) {

        stmt.setInt(1, employeeId);
        stmt.executeUpdate();
        showAlert("Success", "Employee deleted successfully");

    } catch (SQLException e) {
        e.printStackTrace();
       
    }
}

private void FetchEmployeeData() {
    String query = "SELECT * FROM employeedb";

    try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(query)) {

        while (rs.next()) {
            EmployeeList.add(new Employee(
                rs.getInt("EmployeeID"),
                rs.getString("FullName"),
                rs.getString("LastName"),
                rs.getString("Email"),
                rs.getString("Department"),
                rs.getString("Position"),
                rs.getString("Status")
            ));
        }

    } catch (SQLException e) {
        e.printStackTrace();
    }
}
private void setEmployeeTableView() {
    E_ID.setCellValueFactory(new PropertyValueFactory<>("id"));
    E_FIRSTNAME.setCellValueFactory(new PropertyValueFactory<>("firstName"));
    E_LASTNAME.setCellValueFactory(new PropertyValueFactory<>("lastName"));
    E_EMAIL.setCellValueFactory(new PropertyValueFactory<>("email"));
    E_DEPARTMENT.setCellValueFactory(new PropertyValueFactory<>("department"));
    E_POSITION.setCellValueFactory(new PropertyValueFactory<>("position"));
    E_STATUS.setCellValueFactory(new PropertyValueFactory<>("status"));
    E_DELETE.setCellFactory(new Callback<TableColumn<Employee, Void>, TableCell<Employee, Void>>() {
        @Override
        public TableCell<Employee, Void> call(TableColumn<Employee, Void> param) {
            return new TableCell<Employee, Void>() {
                private final Button deleteButton = new Button("Delete");
                private final HBox container = new HBox(deleteButton);

                {
                    container.setAlignment(Pos.CENTER);
                    deleteButton.setStyle("-fx-background-color: #f44336; -fx-text-fill: white;");
                    deleteButton.setOnAction(event -> {
                        Employee employee = getTableView().getItems().get(getIndex());
                        deleteEmployeeFromDatabase(employee.getId());
                        getTableView().getItems().remove(employee);
                    });
                }

                @Override
                protected void updateItem(Void item, boolean empty) {
                    super.updateItem(item, empty);
                    if (empty) {
                        setGraphic(null);
                    } else {
                        setGraphic(container);
                    }
                }
            };
        }
    });
    PROGRESS.setCellFactory(new Callback<TableColumn<Employee, String>, TableCell<Employee, String>>() {
        @Override
        public TableCell<Employee, String> call(TableColumn<Employee, String> param) {
            return new TableCell<Employee, String>() {
                private final ProgressBar progressBar = new ProgressBar();

                @Override
                protected void updateItem(String item, boolean empty) {
                    super.updateItem(item, empty);
                    if (empty) {
                        setGraphic(null);
                    } else {
                        Employee employee = getTableView().getItems().get(getIndex());
                        double progress = calculateEmployeeProgress(employee.getId());
                        progressBar.setProgress(progress);
                        setGraphic(progressBar);
                    }
                }
            };
        }
    });

    EMPLOYEE_TABLE.setItems(EmployeeList);
}

private double calculateEmployeeProgress(int employeeId) {
    String query = "SELECT COUNT(*) AS totalTasks FROM taskdb WHERE Status = ?";
    String finishedQuery = "SELECT COUNT(*) AS finishedTasks FROM finisheddb WHERE Status = ?";
    int totalTasks = 0;
    int finishedTasks = 0;

    try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);
         PreparedStatement totalStmt = conn.prepareStatement(query);
         PreparedStatement finishedStmt = conn.prepareStatement(finishedQuery)) {

        totalStmt.setInt(1, employeeId);
        ResultSet totalRs = totalStmt.executeQuery();
        if (totalRs.next()) {
            totalTasks = totalRs.getInt("totalTasks");
        }

        finishedStmt.setInt(1, employeeId);
        ResultSet finishedRs = finishedStmt.executeQuery();
        if (finishedRs.next()) {
            finishedTasks = finishedRs.getInt("finishedTasks");
        }

    } catch (SQLException e) {
        e.printStackTrace();
    }

    return totalTasks > 0 ? (double) finishedTasks / totalTasks : 0;
}

@FXML
void BTN_ADDEMPLOYEE(MouseEvent event) throws IOException {
    // Add employee logic here

    App.setRoot("ADD_EMPLOYEE", 1280, 800);
}

public class Employee {
    private int id;
    private String firstName;
    private String lastName;
    private String email;
    private String department;
    private String position;
    private String status;

    public Employee(int id, String firstName, String lastName, String email, String department, String position, String status) {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.department = department;
        this.position = position;
        this.status = status;
    }
         public Employee(int int1, String string, String string2, String string3, double double1) {

        }
        // Getters and setters for all fields
        public int getId() { return id; }
        public void setId(int id) { this.id = id; }
    
        public String getFirstName() { return firstName; }
        public void setFirstName(String firstName) { this.firstName = firstName; }
    
        public String getLastName() { return lastName; }
        public void setLastName(String lastName) { this.lastName = lastName; }
    
        public String getEmail() { return email; }
        public void setEmail(String email) { this.email = email; }
    
        public String getDepartment() { return department; }
        public void setDepartment(String department) { this.department = department; }
    
        public String getPosition() { return position; }
        public void setPosition(String position) { this.position = position; }
    
        public String getStatus() { return status; }
        public void setStatus(String status) { this.status = status; }
    }
    
    // =========popoulate the department combo bo in employee tab/
    private void populateDepartmentComboBox() {
       String query = "SELECT Department FROM employeedb";
       try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(query)) {
    
           while (rs.next()) {
               String department = rs.getString("Department");
               if (!DEPARTMENT_COMBO.getItems().contains(department)) {
                   DEPARTMENT_COMBO.getItems().add(department);
               }
           }
    
       } catch (SQLException e) {
           e.printStackTrace();
       }
    
    }
    
private void filterEmployeesByDepartment() {
    String selectedDepartment = DEPARTMENT_COMBO.getValue();
    if (selectedDepartment != null) {
        ObservableList<Employee> filteredList = FXCollections.observableArrayList();
        for (Employee employee : EmployeeList) {
            if (selectedDepartment.equals(employee.getDepartment())) {
                filteredList.add(employee);
            }
        }
        EMPLOYEE_TABLE.setItems(filteredList);
    }
}

//============================================PROJECT TAB=======================================//

private void FetchProjectData() {
    String query = "SELECT * FROM projectname";

    try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(query)) {

        while (rs.next()) {
            ProjectList.add(new Project(
        rs.getString("ProjectTitle"),
        rs.getString("id")
            ));
        }
        TABLE_PROJECT.setItems(ProjectList);

} catch (SQLException e) {
    e.printStackTrace();
}

PR_NO.setCellValueFactory(new PropertyValueFactory<>("id"));
PR_TABLE.setCellValueFactory(new PropertyValueFactory<>("projectName"));
}

private void setProjectTableView() {
    PR_NO.setCellValueFactory(new PropertyValueFactory<>("id"));
    PR_TABLE.setCellValueFactory(new PropertyValueFactory<>("projectName"));
    PR_PROGRESS.setCellFactory(new Callback<TableColumn<Project, Double>, TableCell<Project, Double>>() {
        @Override
        public TableCell<Project, Double> call(TableColumn<Project, Double> param) {
            return new TableCell<Project, Double>() {
                private final ProgressIndicator progressIndicator = new ProgressIndicator();
                private final HBox container = new HBox(progressIndicator);

                {
                    container.setAlignment(Pos.CENTER);
                    progressIndicator.setPrefSize(50, 50); // Set the size of the ProgressIndicator
                }

                @Override
                protected void updateItem(Double item, boolean empty) {
                    super.updateItem(item, empty);
                    if (empty) {
                        setGraphic(null);
                    } else {
                        Project project = getTableView().getItems().get(getIndex());
                        double progress = calculateProjectProgress(project.getId());
                        progressIndicator.setProgress(progress);
                        setGraphic(container);
                    }
                }
            };
        }
    });
    TABLE_PROJECT.setItems(ProjectList);
}

private double calculateProjectProgress(String projectId) {
    String totalTasksQuery = "SELECT COUNT(*) AS totalTasks FROM taskdb WHERE id = ?";
    String finishedTasksQuery = "SELECT COUNT(*) AS finishedTasks FROM finisheddb WHERE Status = ?";
    int totalTasks = 0;
    int finishedTasks = 0;

    try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);
         PreparedStatement totalStmt = conn.prepareStatement(totalTasksQuery);
         PreparedStatement finishedStmt = conn.prepareStatement(finishedTasksQuery)) {
          
        totalStmt.setString(1, projectId);
        ResultSet totalRs = totalStmt.executeQuery();
        if (totalRs.next()) {
            totalTasks = totalRs.getInt("totalTasks");
        }

        finishedStmt.setString(1, projectId);
        ResultSet finishedRs = finishedStmt.executeQuery();
        if (finishedRs.next()) {
            finishedTasks = finishedRs.getInt("finishedTasks");
        }

    } catch (SQLException e) {
        e.printStackTrace();
    }

    return totalTasks > 0 ? (double) finishedTasks / totalTasks : 0;
}

//============================================ADDING DUE DATE LESTINER=======================================/

private void transferOverdueTasks() {
    ObservableList<Task> overdueTasks = FXCollections.observableArrayList();
    Date now = new Date();

    for (Task task : pendingList) {
        if (task.getDue().before(now)) {
            overdueTasks.add(task);
        }
    }

    pendingList.removeAll(overdueTasks);
    MissingList.addAll(overdueTasks);
    updateDatabaseForOverdueTasks(overdueTasks);
}

private void updateDatabaseForOverdueTasks(ObservableList<Task> overdueTasks) {
    String deleteQuery = "DELETE FROM taskdb WHERE id = ?";
    String insertQuery = "INSERT INTO missingdb (id, Title, Instruction, For, AssignedTo, Due, File, Status) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

    try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);
         PreparedStatement deleteStmt = conn.prepareStatement(deleteQuery);
         PreparedStatement insertStmt = conn.prepareStatement(insertQuery)) {

        for (Task task : overdueTasks) {
            deleteStmt.setInt(1, task.getId());
            deleteStmt.executeUpdate();

          insertStmt.setInt(1, task.getId());
            insertStmt.setString(2, task.getTitle());
            insertStmt.setString(3, task.getInstruction());
            insertStmt.setString(4, task.getForField());
            insertStmt.setString(5, task.getAssignedTo());
            insertStmt.setDate(6, new java.sql.Date(task.getDue().getTime()));
            insertStmt.setString(7, task.getFile());
            insertStmt.setString(8, task.getStatus());
            insertStmt.executeUpdate();
        }

    } catch (SQLException e) {
        e.printStackTrace();
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////

}